# dev
snippet imp
import $1
endsnippet

snippet fimp
from $1 import $2
endsnippet

# debug
snippet st
import ipdb; ipdb.set_trace()
endsnippet

# logging
snippet debug_log
import sys
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(message)s'
        }
    },
    'handlers': {
        'stream': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'verbose'
        },
    },
    'loggers': {
        '${0:logger}': {
            'handlers': ['stream'],
            'level': 'DEBUG',
            'propagate': True
        }
    },
}
endsnippet

# glog = get log
snippet glog
import logging
LOGGER = logging.getLogger(${0:__name__})
endsnippet

snippet le
LOGGER.error(${0:msg})
endsnippet

snippet lg
LOGGER.debug(${0:msg})
endsnippet

snippet lw
LOGGER.warning(${0:msg})
endsnippet

snippet lc
LOGGER.critical(${0:msg})
endsnippet

snippet li
LOGGER.info(${0:msg})
endsnippet

# Testing
snippet test_
def test_${1:name}(${2:args}):
    """
    ${3:doc}
    """
	# arrange
    ${4:func}
	# act
	# assert
endsnippet
